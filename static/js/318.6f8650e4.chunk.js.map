{"version":3,"file":"static/js/318.6f8650e4.chunk.js","mappings":"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","sources":["components/ContactForm/ContactFormStyled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactListStyled.js","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  width: 500px;\n  padding: 20px;\n  border: 1px solid #454545;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  margin-bottom: 10px;\n`;\n\nexport const InputName = styled.p`\n  font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n  color: #ffd9db;\n  margin: 2px;\n  font-size: 20px;\n`;\n\nexport const Button = styled.button`\n  width: 100px;\n  height: 30px;\n  margin-top: 15px;\n  border: 1px solid #a7a7a7;\n  border-radius: 10px;\n  background-color: #a7a7a7;\n`;\n\nexport const ButtonText = styled.span`\n  font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n  color: #ffd9db;\n`;\n\nexport const Input = styled.input`\n  width: 300px;\n  height: 30px;\n`;\n","export const selectContacts = ({ contacts: { contacts } }) => contacts;\nexport const selectFilter = ({ filter }) => filter;\nexport const selectIsLoading = ({ contacts: { isLoading } }) => isLoading;\nexport const selectError = ({ contacts: { error } }) => error;\n\nexport const filteredContacts = ({ contacts: { contacts }, filter }) => {\n  if (!filter) {\n    return contacts;\n  }\n  const normalizedFilter = filter.toLowerCase();\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n};\n","import { useState } from 'react';\nimport {\n  Form,\n  Label,\n  InputName,\n  Button,\n  Input,\n  ButtonText,\n} from './ContactFormStyled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setPhone] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleChange = evt => {\n    const { name, value } = evt.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setPhone(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    if (\n      contacts.find(\n        contact =>\n          contact.name.toLowerCase() === name.toLowerCase() ||\n          contact.number === number\n      )\n    ) {\n      alert(`${name} or ${number} is already in contacts.`);\n      return;\n    }\n\n    const newContact = {\n      name,\n      number,\n    };\n\n    dispatch(addContact(newContact));\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        <InputName>Name</InputName>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleChange}\n        />\n      </Label>\n      <Label>\n        <InputName>Number</InputName>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleChange}\n        />\n      </Label>\n      <Button type=\"submit\">\n        <ButtonText>Add contact</ButtonText>\n      </Button>\n    </Form>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  justify-content: center;\n`;\n\nexport const FilterName = styled.p`\n  font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n  color: #7f7f7f;\n  font-size: 25px;\n  margin: auto;\n`;\n\nexport const Input = styled.input`\n  width: 250px;\n  height: 30px;\n`;\n","import { FilterName, Input, Label } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  return (\n    <Label>\n      <FilterName>Find contacts by name</FilterName>\n      <Input\n        type=\"text\"\n        value={filter}\n        onChange={e => dispatch(setFilter(e.currentTarget.value))}\n      ></Input>\n    </Label>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n`;\n\nexport const List = styled.ul`\n  list-style: none;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n  font-size: 25px;\n  margin-bottom: 15px;\n  justify-items: center;\n`;\n\nexport const Button = styled.button`\n  width: 60px;\n  height: 25px;\n  margin-left: 15px;\n  border: 1px solid #a7a7a7;\n  border-radius: 10px;\n  background-color: #a7a7a7;\n`;\n\nexport const ButtonText = styled.span`\n  font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n  color: #ffd9db;\n`;\n","import { Container, Item, Button, List, ButtonText } from './ContactListStyled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filteredContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const filterList = useSelector(filteredContacts);\n  return (\n    <Container>\n      <List>\n        {filterList.map(filterItem => (\n          <Item key={filterItem.id}>\n            {filterItem.name}: {filterItem.number}\n            <Button onClick={() => dispatch(deleteContact(filterItem.id))}>\n              <ButtonText>Delete</ButtonText>\n            </Button>\n          </Item>\n        ))}\n      </List>\n    </Container>\n  );\n};\n","import styled from 'styled-components';\nimport img from '../../image/backround-image-open.jpg';\n\nexport const ContainerContacts = styled.div`\n  width: 100%;\n  height: 85vh;\n  background-image: url(${img});\n  background-repeat: no-repeat;\n  background-size: cover;\n  @media screen and (max-width: 1199px) {\n    background-position: center;\n  }\n  @media screen and (min-width: 1200px) {\n    background-image: url(${img});\n    background-repeat: no-repeat;\n    background-size: 100%;\n  }\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  margin: auto;\n  flex-direction: column;\n  align-items: center;\n  padding: 10px 0;\n  @media (min-width: 1200px) {\n    width: 560px;\n    &:not(:last-child) {\n      margin-right: 20px;\n    }\n  }\n`;\n\nexport const TitleBook = styled.h1`\n  font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n  color: #ffd9db;\n`;\n\nexport const TitleList = styled.h2`\n  font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n  color: #ffd9db;\n`;\n","import { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { Filter } from '../../components/Filter/Filter';\nimport { ContactList } from '../../components/ContactList/ContactList';\n// import { Container } from './AppStyled';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { getIsLoggedIn } from 'redux/auth/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Loader } from '../../components/Loader/Loader';\nimport {\n  ContainerContacts,\n  Container,\n  TitleBook,\n  TitleList,\n} from './Contacts.styled';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLogin = useSelector(getIsLoggedIn);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    if (isLogin) dispatch(fetchContacts());\n  }, [dispatch, isLogin]);\n\n  return (\n    <ContainerContacts>\n      <Container>\n        <TitleBook>Phonebook</TitleBook>\n        {isLoading && <Loader />}\n        {error && <p>{error}</p>}\n        <ContactForm />\n        <TitleList>Contacts</TitleList>\n        <Filter />\n        <ContactList />\n      </Container>\n    </ContainerContacts>\n  );\n};\n\nexport default Contacts;\n"],"names":["Form","styled","Label","InputName","Button","ButtonText","Input","selectContacts","contacts","selectFilter","filter","selectIsLoading","isLoading","selectError","error","filteredContacts","normalizedFilter","toLowerCase","contact","name","includes","ContactForm","useState","setName","number","setPhone","dispatch","useDispatch","useSelector","handleChange","evt","currentTarget","value","onSubmit","preventDefault","find","alert","newContact","addContact","type","pattern","title","required","onChange","FilterName","Filter","e","setFilter","Container","List","Item","ContactList","filterList","map","filterItem","onClick","deleteContact","id","ContainerContacts","img","TitleBook","TitleList","isLogin","getIsLoggedIn","useEffect","fetchContacts","Loader"],"sourceRoot":""}